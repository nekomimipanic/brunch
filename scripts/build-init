#!/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
export LD_LIBRARY_PATH=/lib64:/lib:/usr/lib64:/usr/lib:/usr/local/lib64:/usr/local/lib
export PKG_CONFIG_PATH=/home/chronos/ncurses-pkg/usr/lib64/pkgconfig:/home/chronos/spice-pkg/usr/lib64/pkgconfig:/home/chronos/spice-pkg/usr/share/pkgconfig
export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

blocksize() {
  local path="$1"
  if [ -b "${path}" ]; then
    local dev="${path##*/}"
    local sys="/sys/block/${dev}/queue/logical_block_size"
    if [ -e "${sys}" ]; then
      cat "${sys}"
    else
      local part="${path##*/}"
      local block
      block="$(get_block_dev_from_partition_dev "${path}")"
      block="${block##*/}"
      cat "/sys/block/${block}/${part}/queue/logical_block_size"
    fi
  else
    echo 512
  fi
}

numsectors() {
  local block_size
  local sectors
  local path="$1"

  if [ -b "${path}" ]; then
    local dev="${path##*/}"
    block_size="$(blocksize "${path}")"

    if [ -e "/sys/block/${dev}/size" ]; then
      sectors="$(cat "/sys/block/${dev}/size")"
    else
      part="${path##*/}"
      block="$(get_block_dev_from_partition_dev "${path}")"
      block="${block##*/}"
      sectors="$(cat "/sys/block/${block}/${part}/size")"
    fi
  else
    local bytes
    bytes="$(stat -c%s "${path}")"
    local rem=$(( bytes % 512 ))
    block_size=512
    sectors=$(( bytes / 512 ))
    if [ "${rem}" -ne 0 ]; then
      sectors=$(( sectors + 1 ))
    fi
  fi

  echo $(( sectors * 512 / block_size ))
}

write_base_table() {
  local target="$1"
  local blocks
  block_size=$(blocksize "${target}")
  numsecs=$(numsectors "${target}")
  local curr=32768
  if [ $(( 0 & (block_size - 1) )) -gt 0 ]; then
    echo "Primary Entry Array padding is not block aligned." >&2
    exit 1
  fi
  cgpt create -p $(( 0 / block_size )) "${target}"
  blocks=$(( 8388608 / block_size ))
  if [ $(( 8388608 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  cgpt add -i 11 -b $(( curr / block_size )) -s ${blocks} -t firmware     -l "RWFW" "${target}"
  : $(( curr += blocks * block_size ))
  blocks=$(( 1 / block_size ))
  if [ $(( 1 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  cgpt add -i 6 -b $(( curr / block_size )) -s ${blocks} -t kernel     -l "KERN-C" "${target}"
  : $(( curr += blocks * block_size ))
  if [ $(( curr % 4096 )) -gt 0 ]; then
    : $(( curr += 4096 - curr % 4096 ))
  fi
  blocks=$(( 1073741824 / block_size ))
  if [ $(( 1073741824 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  cgpt add -i 7 -b $(( curr / block_size )) -s ${blocks} -t rootfs     -l "ROOT-C" "${target}"
  : $(( curr += blocks * block_size ))
  blocks=$(( 1 / block_size ))
  if [ $(( 1 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  cgpt add -i 9 -b $(( curr / block_size )) -s ${blocks} -t reserved     -l "reserved" "${target}"
  : $(( curr += blocks * block_size ))
  blocks=$(( 1 / block_size ))
  if [ $(( 1 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  cgpt add -i 10 -b $(( curr / block_size )) -s ${blocks} -t reserved     -l "reserved" "${target}"
  : $(( curr += blocks * block_size ))
  blocks=$(( 2062336 / block_size ))
  if [ $(( 2062336 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  : $(( curr += blocks * block_size ))
  blocks=$(( 33554432 / block_size ))
  if [ $(( 33554432 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  cgpt add -i 2 -b $(( curr / block_size )) -s ${blocks} -t kernel     -l "KERN-A" "${target}"
  : $(( curr += blocks * block_size ))
  blocks=$(( 33554432 / block_size ))
  if [ $(( 33554432 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  cgpt add -i 4 -b $(( curr / block_size )) -s ${blocks} -t kernel     -l "KERN-B" "${target}"
  : $(( curr += blocks * block_size ))
  if [ $(( curr % 4096 )) -gt 0 ]; then
    : $(( curr += 4096 - curr % 4096 ))
  fi
  blocks=$(( 16777216 / block_size ))
  if [ $(( 16777216 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  cgpt add -i 8 -b $(( curr / block_size )) -s ${blocks} -t data     -l "OEM" "${target}"
  : $(( curr += blocks * block_size ))
  blocks=$(( 67108864 / block_size ))
  if [ $(( 67108864 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  : $(( curr += blocks * block_size ))
  blocks=$(( 33554432 / block_size ))
  if [ $(( 33554432 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  cgpt add -i 12 -b $(( curr / block_size )) -s ${blocks} -t efi     -l "EFI-SYSTEM" "${target}"
  : $(( curr += blocks * block_size ))
  if [ $(( curr % 4096 )) -gt 0 ]; then
    : $(( curr += 4096 - curr % 4096 ))
  fi
  blocks=$(( 4294967296 / block_size ))
  if [ $(( 4294967296 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  cgpt add -i 5 -b $(( curr / block_size )) -s ${blocks} -t rootfs     -l "ROOT-B" "${target}"
  : $(( curr += blocks * block_size ))
  if [ $(( curr % 4096 )) -gt 0 ]; then
    : $(( curr += 4096 - curr % 4096 ))
  fi
  blocks=$(( 4294967296 / block_size ))
  if [ $(( 4294967296 % block_size )) -gt 0 ]; then
     : $(( blocks += 1 ))
  fi
  cgpt add -i 3 -b $(( curr / block_size )) -s ${blocks} -t rootfs     -l "ROOT-A" "${target}"
  : $(( curr += blocks * block_size ))
  if [ $(( curr % 4096 )) -gt 0 ]; then
    : $(( curr += 4096 - curr % 4096 ))
  fi
  blocks=$(( numsecs - (curr + 24576) / block_size ))
  cgpt add -i 1 -b $(( curr / block_size )) -s ${blocks} -t data     -l "STATE" "${target}"
  cgpt add -i 2 -S 0 -T 15 -P 15 "${target}"
  cgpt add -i 4 -S 0 -T 15 -P 0 "${target}"
  cgpt add -i 6 -S 0 -T 15 -P 0 "${target}"
  cgpt boot -p -i 12 "${target}"
  cgpt add -i 12 -B 0 "${target}"
  cgpt show "${target}"
}

cd /home/chronos/
mkdir ./source

version="$(/opt/google/chrome/chrome --version)"
version=r"${version:14:2}"
echo "Entered chroot with kernel $kernel and recovery version $version"

curl -Ls https://raw.github.com/skycocker/chromebrew/master/install.sh | bash

#Method to use when Chromebrew is broken
#curl -Ls https://raw.githubusercontent.com/skycocker/chromebrew/17c190887e6907ffe8ebf247323753c4e7bd1fb1/install.sh > install.sh
#In install.sh Replace git reset --hard origin/"${BRANCH}" with git reset --hard 2ef13a0703 # 2ef13a0703 is the last working commit
#sed -i 's#git reset --hard origin/"${BRANCH}"#git reset --hard 17c190887e#g' ./install.sh
#bash ./install.sh

yes | crew install docbook make patch wget xmlcatmgr
mkdir -p /usr/local/etc/xml
ln -s /usr/local/docbook/catalog.xml /usr/local/etc/xml/catalog.xml

yes | crew install alsa_lib autoconf_archive cpio expect glib libaio libjpeg libopus libusb pixman python3 six socat
crew remove libgcrypt
python3 -m ensurepip
pip3 install pyparsing
pip3 install cryptography
pip3 install meson
pip3 install ninja

sudo rm /etc/ld.so.cache
sudo ldconfig

cp /usr/local/bin/ld.gold /usr/local/bin/ld
sudo rm /usr/lib64/libstdc++.so*

sudo ln -s /usr/local/lib64/libc_nonshared.a /usr/lib64/libc_nonshared.a
sudo ln -s /usr/local/lib64/libmvec_nonshared.a /usr/lib64/libmvec_nonshared.a

mkdir -p ./version-pkg/etc
echo "Brunch $version k$kernel $(date +"%Y%m%d")" > ./version-pkg/etc/brunch_version
cd ./version-pkg
tar zcvf ../rootc/packages/version.tar.gz * --owner=0 --group=0
cd ..
rm -rf ./version-pkg

mkdir -p ./binaries-pkg/usr/sbin

git clone -b master https://git.code.sf.net/p/linuxconsole/code linuxconsole
cp -r ./linuxconsole ./source/
cd linuxconsole/utils
make inputattach
cp inputattach ../../binaries-pkg/usr/sbin/
cd ../..
rm -rf ./linuxconsole

git clone --depth=1 -b msr-tools-1.3 https://github.com/intel/msr-tools.git
cp -r ./msr-tools ./source/
cd msr-tools
make
cp cpuid ../binaries-pkg/usr/sbin/
cp rdmsr ../binaries-pkg/usr/sbin/
cp wrmsr ../binaries-pkg/usr/sbin/
cd ..
rm -rf ./msr-tools

git clone --depth=1 -b master git://thekelleys.org.uk/dnsmasq.git
cp -r ./dnsmasq ./source/
cd dnsmasq
sed -i "s#PREFIX        = /usr/local#PREFIX        = /usr#g" ./Makefile
make
cp ./src/dnsmasq ../binaries-pkg/usr/sbin/
cd ..
rm -rf ./dnsmasq

git clone --depth=1 -b master https://github.com/tinyproxy/tinyproxy.git
cp -r ./tinyproxy ./source/
cd tinyproxy
./autogen.sh --prefix=/usr
make
cp ./src/tinyproxy ../binaries-pkg/usr/sbin/
cd ..
rm -rf ./tinyproxy

git clone --depth=1 -b master https://github.com/plougher/squashfs-tools.git
cp -r ./squashfs-tools ./source/
cd squashfs-tools/squashfs-tools
make
cp mksquashfs ../../binaries-pkg/usr/sbin/
cp unsquashfs ../../binaries-pkg/usr/sbin/
cd ../..
rm -rf ./squashfs-tools

cd ./binaries-pkg
tar zcvf ../rootc/packages/binaries.tar.gz * --owner=0 --group=0
cd ..
rm -rf ./binaries-pkg

git clone --depth=1 -b master https://github.com/freedesktop/spice-protocol.git
cp -r ./spice-protocol ./source/
cd ./spice-protocol
meson --prefix="/home/chronos/spice-pkg/usr" build/
meson configure build/
ninja -C build/ install
cd ..
rm -rf ./spice-protocol

git clone -b master https://github.com/freedesktop/spice-usbredir.git
cp -r ./spice-usbredir ./source/
cd ./spice-usbredir
sed -i '/AC_CONFIG_SRCDIR/ a AC_CONFIG_AUX_DIR([.])' ./configure.ac
./autogen.sh --prefix=/usr --libdir=/usr/lib64 CFLAGS=-fstack-protector-all
make
make DESTDIR=/home/chronos/spice-pkg install
sed -i "s#/usr#/home/chronos/spice-pkg/usr#g" /home/chronos/spice-pkg/usr/lib64/pkgconfig/libusbredir*.pc
cd ..
rm -rf ./spice-usbredir

git clone -b master https://github.com/freedesktop/spice.git
cp -r ./spice ./source/
cd ./spice
./autogen.sh --prefix=/usr --libdir=/usr/lib64 CFLAGS=-fstack-protector-all
make
make DESTDIR=/home/chronos/spice-pkg install
sed -i "s#/usr#/home/chronos/spice-pkg/usr#g" /home/chronos/spice-pkg/usr/lib64/pkgconfig/spice-server.pc
for i in $(ldd ../spice-pkg/usr/lib64/libspice-server.so | grep "/usr/local/lib" | grep -v ld-linux | cut -d' ' -f3); do cp "$i" ../spice-pkg/usr/lib64/; done
cd ..
rm -rf ./spice

git clone --depth=1 -b master git://git.qemu-project.org/qemu.git
cp -r ./qemu ./source/
cd ./qemu
./configure --prefix=/usr --libdir=/usr/lib64 --target-list=x86_64-softmmu --enable-kvm --enable-spice --enable-linux-aio --enable-usb-redir --audio-drv-list=alsa --disable-guest-agent --disable-curses --disable-nettle  --disable-werror
make DESTDIR=/home/chronos/qemu-pkg install
ln -s qemu-system-x86_64 ../qemu-pkg/usr/bin/qemu
rm -r ../qemu-pkg/usr/include ../qemu-pkg/usr/share/applications ../qemu-pkg/usr/share/icons
mkdir -p ../qemu-pkg/usr/lib64
cp -a ../spice-pkg/usr/lib64/*.so* ../qemu-pkg/usr/lib64/
cd ../qemu-pkg
tar zcvf ../rootc/packages/qemu.tar.gz * --owner=0 --group=0
cd ..
rm -rf ./qemu ./qemu-pkg ./spice-pkg

git clone --depth=1 -b master https://github.com/stefanberger/libtpms.git
cp -r ./libtpms ./source/
cd ./libtpms
./autogen.sh --prefix=/usr/local --libdir=/usr/local/lib64 --with-openssl --with-tpm2
make install
cd ..
rm -rf ./libtpms

git clone --depth=1 -b master https://github.com/stefanberger/swtpm.git
cp -r ./swtpm ./source/
cd ./swtpm
sed -i '/AC_CONFIG_SRCDIR/ a AC_CONFIG_AUX_DIR([.])' ./configure.ac
./autogen.sh --prefix=/usr --libdir=/usr/lib64 with_seccomp=no with_swtpm_setup=no with_gnutls=no with_cuse=no with_swtpm_setup=no
make
make DESTDIR=/home/chronos/swtpm-pkg install
for i in $(ldd ../swtpm-pkg/usr/bin/swtpm | grep "/usr/local/lib" | grep -v ld-linux | cut -d' ' -f3); do cp "$i" ../swtpm-pkg/usr/lib64/; done
cd ..
rm -rf ./swtpm

cd ./swtpm-pkg/usr/lib64
mv ./swtpm/* ./
rm -r `ls | grep -v '.so'`
cd ../bin
rm -r `ls swtpm_* | grep -v 'swtpm_ioctl'`
cd ../..
mkdir -p ./etc/init
cat >./etc/init/swtpm.conf <<SWTPM
start on starting boot-services

script
   modprobe tpm_vtpm_proxy
   mkdir -p /var/lib/swtpm
   if [ -f "/etc/init/trunksd.conf" ]; then
   	swtpm chardev --vtpm-proxy --tpm2 --tpmstate dir=/var/lib/swtpm --ctrl type=tcp,port=10001 --flags startup-clear
   else
   	swtpm chardev --vtpm-proxy --tpmstate dir=/var/lib/swtpm --ctrl type=tcp,port=10001 --flags startup-clear
   fi
   swtpm_ioctl --tcp :10001 -i
end script
SWTPM
tar zcvf ../rootc/packages/swtpm.tar.gz * --owner=0 --group=0
cd ..
rm -rf ./swtpm-pkg

# magic spell 4 ncurse
sudo ln -s /usr/local/lib64/gcc/x86_64-cros-linux-gnu/10.2.0 /usr/local/lib64/gcc/x86_64-cros-linux-gnu/8.3.0

git clone -b master https://github.com/ThomasDickey/ncurses-snapshots.git
cp -r ./ncurses-snapshots ./source/
cd ./ncurses-snapshots
./configure  --prefix=/usr --libdir=/usr/lib64 --with-shared --without-debug --without-normal --enable-pc-files --with-libtool --with-pkg-config-libdir=/usr/lib64/pkgconfig
make
sudo make install
make DESTDIR=/home/chronos/ncurses-pkg install
cd ../ncurses-pkg
tar zcvf ../rootc/packages/ncurses.tar.gz * --owner=0 --group=0
cd ..
rm -rf ./ncurses ./ncurses-pkg
crew remove ncurses

git clone -b master git://git.savannah.gnu.org/nano.git
cp -r ./nano ./source/
cd ./nano
./autogen.sh
./configure --prefix=/usr --libdir=/usr/lib64
make
make DESTDIR=/home/chronos/nano-pkg install
mkdir -p ../nano-pkg/usr/lib64
for i in $(ldd ../nano-pkg/usr/bin/nano | grep "/usr/local/lib" | grep -v ld-linux | cut -d' ' -f3); do cp "$i" ../nano-pkg/usr/lib64/; done
cd ../nano-pkg
tar zcvf ../rootc/packages/nano.tar.gz * --owner=0 --group=0
cd ..
rm -rf ./nano ./nano-pkg

git clone --depth=1 -b master https://github.com/mirror/busybox.git
cp -r busybox ./source/
cd busybox
make defconfig
sed -i 's/# CONFIG_INSTALL_NO_USR is not set/CONFIG_INSTALL_NO_USR=y/g' .config
sed -i 's/# CONFIG_STATIC is not set/CONFIG_STATIC=y/g' .config
make
cd ..

cd ./source
tar zcf /out/sources_"$version"_k"$kernel"_"$(date +"%Y%m%d")".tar.gz * --owner=0 --group=0
cd ..
rm -rf ./source

sudo chown -R chronos:chronos ./initramfs
cd initramfs
mkdir bin etc lib lib64 proc sbin sys tmp usr
cp ../busybox/busybox ./bin/busybox
for i in $(ldd /sbin/blkid | cut -d' ' -f3); do cp "$i" ./lib64; done
cp /sbin/blkid ./sbin/
for i in $(ldd /usr/bin/cgpt | cut -d' ' -f3); do cp "$i" ./lib64; done
cp /usr/bin/cgpt ./sbin/
for i in $(ldd /sbin/e2fsck | cut -d' ' -f3); do cp "$i" ./lib64; done
cp /sbin/e2fsck ./sbin/
for i in $(ldd /sbin/losetup | cut -d' ' -f3); do cp "$i" ./lib64; done
cp /sbin/losetup ./sbin/
for i in $(ldd /usr/bin/ntfs-3g | cut -d' ' -f3); do cp "$i" ./lib64; done
cp /usr/bin/ntfs-3g ./sbin/
for i in $(ldd /usr/bin/pv | cut -d' ' -f3); do cp "$i" ./lib64; done
cp /usr/bin/pv ./sbin/
sudo chmod 0755 ./sbin/*
find . | cpio -o -H newc | gzip > ../rootc/initramfs.img
cd ..
rm -rf ./busybox

git clone --depth=1 -b master git://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git
rm -rf ./linux-firmware/.git
rm -rf ./linux-firmware/bnx2x
rm -rf ./linux-firmware/dpaa2
rm -rf ./linux-firmware/liquidio
rm -rf ./linux-firmware/mellanox
rm -rf ./linux-firmware/netronome
rm -rf ./linux-firmware/qcom
rm -rf ./linux-firmware/qed
rm -rf ./linux-firmware/ti-connectivity
cp -r ./firmware-mods/* ./linux-firmware/
cp -r ./linux-firmware ./rootc/lib/firmware
rm -rf ./linux-firmware

cd ./image
image_size=12
dd if=/dev/zero of=./chromeos.img bs=1G seek=$image_size count=0
write_base_table ./chromeos.img
loopdev=`sudo losetup --show -fP ./chromeos.img`
sudo mkdir ./tmp
yes | sudo mkfs.ext4 -F -b 4096 -L "ROOT-C" "$loopdev"p7
sudo mount "$loopdev"p7 ./tmp
sudo cp -r ../rootc/* ./tmp/
sudo umount ./tmp
sudo bash -c "pv ""$loopdev""p7 > ../brunch/rootc.img"
sudo bash -c "pv efi.img > ""$loopdev""p12"
sudo mount "$loopdev"p12 ./tmp
sudo rm -r ./tmp/*
sudo cp -r ./efi-mods/* ./tmp/
sudo umount ./tmp
sudo bash -c "pv ""$loopdev""p12 > ../brunch/efi_secure.img"
sudo mount "$loopdev"p12 ./tmp
sudo rm -r ./tmp/*
sudo mkdir -p ./tmp/efi/boot
sudo cp ./efi-mods/efi/boot/grub.cfg ./tmp/efi/boot/grub.cfg
sudo cp ./efi-mods/efi/boot/grubx64.efi ./tmp/efi/boot/bootx64.efi
sudo cp ./efi-mods/efi/boot/bootia32.efi ./tmp/efi/boot/bootia32.efi
sudo umount ./tmp
sudo bash -c "pv ""$loopdev""p12 > ../brunch/efi_legacy.img"
sudo rm -r ./tmp
sudo losetup -d "$loopdev"
rm ./chromeos.img
cd ..

cd ./brunch
tar zcf /out/brunch_"$version"_k"$kernel"_"$(date +"%Y%m%d")".tar.gz * --owner=0 --group=0
cd ..

echo "End of chroot"
